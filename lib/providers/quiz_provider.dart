import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../models/quiz.dart';
import '../services/quiz_service.dart';
import '../services/gpt_service.dart'; // GPT 서비스 가져오기

class QuizProvider with ChangeNotifier {
  List<Quiz> _quizzes = [];
  List<Quiz> get quizzes => _quizzes;
  String _selectedCategory = 'All';
  String _selectedDifficulty = 'All';
  final QuizService _quizService = QuizService();
  final GPTService _gptService = GPTService(); // GPT 서비스 인스턴스 추가

  List<Quiz> get filteredQuizzes {
    return _quizzes.where((quiz) {
      bool categoryMatch =
          _selectedCategory == 'All' || quiz.category == _selectedCategory;
      bool difficultyMatch = _selectedDifficulty == 'All' ||
          quiz.difficulty == _selectedDifficulty;
      return categoryMatch && difficultyMatch;
    }).toList();
  }

  void setCategory(String category) {
    _selectedCategory = category;
    notifyListeners();
  }

  void setDifficulty(String difficulty) {
    _selectedDifficulty = difficulty;
    notifyListeners();
  }

  Future<void> fetchQuizzes() async {
    try {
      var connectivityResult = await (Connectivity().checkConnectivity());
      if (connectivityResult != ConnectivityResult.none) {
        QuerySnapshot querySnapshot =
            await FirebaseFirestore.instance.collection('quizzes').get();
        _quizzes = querySnapshot.docs.map((doc) {
          return Quiz.fromMap(doc.data() as Map<String, dynamic>, id: doc.id);
        }).toList();
        _saveQuizzesToLocal(_quizzes);
      } else {
        _quizzes = await _getQuizzesFromLocal();
      }
      notifyListeners();
    } catch (e) {
      print('Error fetching quizzes: $e');
    }
  }

  Future<void> _saveQuizzesToLocal(List<Quiz> quizzes) async {
    final prefs = await SharedPreferences.getInstance();
    final String encodedData =
        json.encode(quizzes.map((e) => e.toJson()).toList());
    await prefs.setString('quizzes', encodedData);
  }

  Future<List<Quiz>> _getQuizzesFromLocal() async {
    final prefs = await SharedPreferences.getInstance();
    final String? quizzesString = prefs.getString('quizzes');
    if (quizzesString != null) {
      final List<dynamic> decodedData = json.decode(quizzesString);
      return decodedData
          .map((e) => Quiz.fromJson(e as Map<String, dynamic>))
          .toList();
    }
    return [];
  }

  Future<void> addQuiz(Quiz quiz) async {
    try {
      await _quizService.addQuiz(quiz);
      // Firestore에 퀴즈 추가 후, 로컬 리스트에도 추가
      _quizzes.add(quiz);
      _saveQuizzesToLocal(_quizzes);
      notifyListeners();
    } catch (e) {
      print('Error adding quiz: $e');
    }
  }

  Future<void> addMultipleQuizzes(List<Quiz> quizzes) async {
    try {
      await _quizService.addMultipleQuizzes(quizzes);
      _quizzes.addAll(quizzes);
      _saveQuizzesToLocal(_quizzes);
      notifyListeners();
    } catch (e) {
      print('Error adding multiple quizzes: $e');
    }
  }

  Future<void> generateAndSaveQuiz(String prompt) async {
    try {
      // GPT 서비스에서 질문 생성
      final response = await _gptService.generateQuestion(prompt);
      final questionText = response['choices'][0]['text'].trim();

      // 새 퀴즈 객체 생성
      final quiz = Quiz(
        id: '', // Firestore에서 자동 생성됨
        title: 'Generated Quiz',
        description: 'Quiz generated by GPT-3',
        category: 'General',
        difficulty: 'Medium',
        questions: [
          Question(
            text: questionText,
            options: ['Option 1', 'Option 2', 'Option 3', 'Option 4'], // 예시 옵션
            correctOptionIndex: 0, // 정답 인덱스
          ),
        ],
      );

      // Firestore에 퀴즈 저장
      await addQuiz(quiz);
    } catch (e) {
      print('Error generating or saving quiz: $e');
    }
  }

  Future<void> saveQuizResult(
      String quizId, int score, Duration duration, String userId) async {
    try {
      await FirebaseFirestore.instance.collection('quiz_results').add({
        'quizId': quizId,
        'userId': userId,
        'score': score,
        'duration': duration.inSeconds,
        'timestamp': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      print('Error saving quiz result: $e');
    }
  }

  Future<Map<String, dynamic>> getQuizStatistics(
      String quizId, String userId) async {
    try {
      QuerySnapshot resultSnapshot = await FirebaseFirestore.instance
          .collection('quiz_results')
          .where('quizId', isEqualTo: quizId)
          .where('userId', isEqualTo: userId)
          .orderBy('score', descending: true)
          .limit(1)
          .get();

      if (resultSnapshot.docs.isNotEmpty) {
        return {
          'highScore': resultSnapshot.docs.first['score'],
          'fastestTime': resultSnapshot.docs.first['duration'],
        };
      }
      return {'highScore': 0, 'fastestTime': 0};
    } catch (e) {
      print('Error getting quiz statistics: $e');
      return {'highScore': 0, 'fastestTime': 0};
    }
  }
}
